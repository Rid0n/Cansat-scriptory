
radio24l01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000002b4  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000130  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000018d5  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003c8  00000000  00000000  00001d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000b09  00000000  00000000  00002143  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003e4  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000004a1  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001084  00000000  00000000  000034d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000120  00000000  00000000  00004555  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	c3 c0       	rjmp	.+390    	; 0x18c <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 31       	cpi	r26, 0x1E	; 30
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	eb d0       	rcall	.+470    	; 0x29a <main>
  c4:	f5 c0       	rjmp	.+490    	; 0x2b0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Uart_tr>:
	
	

	radio_writereg(CONFIG, (1 << EN_CRC) | (1 << CRCO) | (1 << PWR_UP)  | (1 << MASK_RX_DR)| (1 << MASK_MAX_RT) | (1 << PRIM_RX)); // Включение питания , power-up, control sum, masking receive&transmit interruptions
	return (radio_readreg(CONFIG) == ((1 << EN_CRC) | (1 << CRCO) | (1 << PWR_UP) | (1 << PRIM_RX) | (1 << MASK_RX_DR)| (1 << MASK_MAX_RT))) ? 1 : 0;
}
  c8:	fc 01       	movw	r30, r24
  ca:	20 81       	ld	r18, Z
  cc:	22 23       	and	r18, r18
  ce:	59 f0       	breq	.+22     	; 0xe6 <Uart_tr+0x1e>
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	2c b9       	out	0x0c, r18	; 12
  d4:	5d 9b       	sbis	0x0b, 5	; 11
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <Uart_tr+0xc>
  d8:	3f 5f       	subi	r19, 0xFF	; 255
  da:	fc 01       	movw	r30, r24
  dc:	e3 0f       	add	r30, r19
  de:	f1 1d       	adc	r31, r1
  e0:	20 81       	ld	r18, Z
  e2:	21 11       	cpse	r18, r1
  e4:	f6 cf       	rjmp	.-20     	; 0xd2 <Uart_tr+0xa>
  e6:	08 95       	ret

000000e8 <spi_init>:
  e8:	87 b3       	in	r24, 0x17	; 23
  ea:	8c 62       	ori	r24, 0x2C	; 44
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	80 e5       	ldi	r24, 0x50	; 80
  f0:	8d b9       	out	0x0d, r24	; 13
  f2:	08 95       	ret

000000f4 <radio_init>:
  f4:	81 b3       	in	r24, 0x11	; 17
  f6:	86 60       	ori	r24, 0x06	; 6
  f8:	81 bb       	out	0x11, r24	; 17
  fa:	88 98       	cbi	0x11, 0	; 17
  fc:	91 9a       	sbi	0x12, 1	; 18
  fe:	92 98       	cbi	0x12, 2	; 18
 100:	f3 cf       	rjmp	.-26     	; 0xe8 <spi_init>
 102:	08 95       	ret

00000104 <spi_send_recv>:
 104:	8f b9       	out	0x0f, r24	; 15
 106:	77 9b       	sbis	0x0e, 7	; 14
 108:	fe cf       	rjmp	.-4      	; 0x106 <spi_send_recv+0x2>
 10a:	8f b1       	in	r24, 0x0f	; 15
 10c:	08 95       	ret

0000010e <radio_cmd>:
 10e:	91 98       	cbi	0x12, 1	; 18
 110:	f9 df       	rcall	.-14     	; 0x104 <spi_send_recv>
 112:	91 9a       	sbi	0x12, 1	; 18
 114:	08 95       	ret

00000116 <radio_readreg>:
 116:	91 98       	cbi	0x12, 1	; 18
 118:	8f 71       	andi	r24, 0x1F	; 31
 11a:	f4 df       	rcall	.-24     	; 0x104 <spi_send_recv>
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	f2 df       	rcall	.-28     	; 0x104 <spi_send_recv>
 120:	91 9a       	sbi	0x12, 1	; 18
 122:	08 95       	ret

00000124 <radio_writereg>:
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	d6 2f       	mov	r29, r22
 12a:	91 98       	cbi	0x12, 1	; 18
 12c:	8f 71       	andi	r24, 0x1F	; 31
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	e9 df       	rcall	.-46     	; 0x104 <spi_send_recv>
 132:	c8 2f       	mov	r28, r24
 134:	8d 2f       	mov	r24, r29
 136:	e6 df       	rcall	.-52     	; 0x104 <spi_send_recv>
 138:	91 9a       	sbi	0x12, 1	; 18
 13a:	8c 2f       	mov	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <radio_read_rx_payload_width>:
 142:	91 98       	cbi	0x12, 1	; 18
 144:	80 e6       	ldi	r24, 0x60	; 96
 146:	de df       	rcall	.-68     	; 0x104 <spi_send_recv>
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	dc df       	rcall	.-72     	; 0x104 <spi_send_recv>
 14c:	91 9a       	sbi	0x12, 1	; 18
 14e:	08 95       	ret

00000150 <radio_read_buf>:
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	e6 2e       	mov	r14, r22
 15e:	f7 2e       	mov	r15, r23
 160:	14 2f       	mov	r17, r20
 162:	91 98       	cbi	0x12, 1	; 18
 164:	cf df       	rcall	.-98     	; 0x104 <spi_send_recv>
 166:	08 2f       	mov	r16, r24
 168:	11 23       	and	r17, r17
 16a:	39 f0       	breq	.+14     	; 0x17a <radio_read_buf+0x2a>
 16c:	ce 2d       	mov	r28, r14
 16e:	df 2d       	mov	r29, r15
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	c8 df       	rcall	.-112    	; 0x104 <spi_send_recv>
 174:	89 93       	st	Y+, r24
 176:	11 50       	subi	r17, 0x01	; 1
 178:	d9 f7       	brne	.-10     	; 0x170 <radio_read_buf+0x20>
 17a:	91 9a       	sbi	0x12, 1	; 18
 17c:	80 2f       	mov	r24, r16
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	08 95       	ret

0000018c <__vector_1>:
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	0b b6       	in	r0, 0x3b	; 59
 198:	0f 92       	push	r0
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
 1b2:	86 e1       	ldi	r24, 0x16	; 22
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	88 df       	rcall	.-240    	; 0xc8 <Uart_tr>
 1b8:	6e e2       	ldi	r22, 0x2E	; 46
 1ba:	87 e0       	ldi	r24, 0x07	; 7
 1bc:	b3 df       	rcall	.-154    	; 0x124 <radio_writereg>
 1be:	8f e1       	ldi	r24, 0x1F	; 31
 1c0:	9e e4       	ldi	r25, 0x4E	; 78
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <__vector_1+0x36>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <__vector_1+0x3c>
 1c8:	00 00       	nop
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0b be       	out	0x3b, r0	; 59
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <radio_is_interrupt>:
uint8_t radio_is_interrupt() {
	return (RADIO_PIN & RADIO_IRQ) ? 0 : 1;
 1f0:	90 b3       	in	r25, 0x10	; 16
 1f2:	93 70       	andi	r25, 0x03	; 3
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	09 f0       	breq	.+2      	; 0x1fa <radio_is_interrupt+0xa>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
}
 1fa:	08 95       	ret

000001fc <check_radio>:
void check_radio() {
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	a0 97       	sbiw	r28, 0x20	; 32
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	f8 94       	cli
 20c:	de bf       	out	0x3e, r29	; 62
 20e:	0f be       	out	0x3f, r0	; 63
 210:	cd bf       	out	0x3d, r28	; 61
	if (!radio_is_interrupt()) // Если прерывания нет, то не задерживаемся
 212:	ee df       	rcall	.-36     	; 0x1f0 <radio_is_interrupt>
 214:	88 23       	and	r24, r24
 216:	09 f4       	brne	.+2      	; 0x21a <check_radio+0x1e>
 218:	36 c0       	rjmp	.+108    	; 0x286 <check_radio+0x8a>
	return;
	uint8_t status = radio_cmd(NOP);
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	78 df       	rcall	.-272    	; 0x10e <radio_cmd>
 21e:	18 2f       	mov	r17, r24
	radio_writereg(STATUS, status); // Просто запишем регистр обратно, тем самым сбросив биты прерываний
 220:	68 2f       	mov	r22, r24
 222:	87 e0       	ldi	r24, 0x07	; 7
 224:	7f df       	rcall	.-258    	; 0x124 <radio_writereg>
	
	if (status & ((1 << TX_DS) | (1 << MAX_RT))) { // Завершена передача успехом, или нет,
 226:	81 2f       	mov	r24, r17
 228:	80 73       	andi	r24, 0x30	; 48
 22a:	69 f0       	breq	.+26     	; 0x246 <check_radio+0x4a>
		if (status & (1 << MAX_RT)) { // Если достигнуто максимальное число попыток
 22c:	14 ff       	sbrs	r17, 4
 22e:	02 c0       	rjmp	.+4      	; 0x234 <check_radio+0x38>
			radio_cmd(FLUSH_TX); // Удалим последний пакет из очереди
 230:	81 ee       	ldi	r24, 0xE1	; 225
 232:	6d df       	rcall	.-294    	; 0x10e <radio_cmd>
			on_send_error(); // Вызовем обработчик
		}
		if (!(radio_readreg(FIFO_STATUS) & (1 << TX_EMPTY))) { // Если в очереди передатчика есть что передавать
 234:	87 e1       	ldi	r24, 0x17	; 23
 236:	6f df       	rcall	.-290    	; 0x116 <radio_readreg>
 238:	84 fd       	sbrc	r24, 4
 23a:	09 c0       	rjmp	.+18     	; 0x24e <check_radio+0x52>
	writebyteAdxl(DATA_FORMAT, 0b00000011);
}*/
/////////////////////////////end of that stuff
// Выбирает активное состояние (высокий уровень) на линии CE
inline void radio_assert_ce() {
	RADIO_PORT |= (1 << RADIO_CE); // Установка высокого уровня на линии CE
 23c:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	88 e2       	ldi	r24, 0x28	; 40
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <check_radio+0x44>
}

// Выбирает неактивное состояние (низкий уровень) на линии CE
inline void radio_deassert_ce() {
	RADIO_PORT &= ~(1 << RADIO_CE); // Установка низкого уровня на линии CE
 244:	92 98       	cbi	0x12, 2	; 18
			radio_writereg(CONFIG, conf | (1 << PRIM_RX)); // Устанавливаем бит PRIM_RX: приём
			radio_assert_ce(); // Высокий уровень на линии CE переводит радио-чип в режим приёма
		}
	}
	uint8_t protect = 4; // В очереди FIFO не должно быть более 3 пакетов. Если больше, значит что-то не так
	while (((status & (7 << RX_P_NO)) != (7 << RX_P_NO)) && protect--) { // Пока в очереди есть принятый пакет
 246:	1e 70       	andi	r17, 0x0E	; 14
 248:	1e 30       	cpi	r17, 0x0E	; 14
 24a:	49 f4       	brne	.+18     	; 0x25e <check_radio+0x62>
 24c:	1c c0       	rjmp	.+56     	; 0x286 <check_radio+0x8a>
		if (!(radio_readreg(FIFO_STATUS) & (1 << TX_EMPTY))) { // Если в очереди передатчика есть что передавать
			radio_assert_ce(); // Импульс на линии CE приведёт к началу передачи
			_delay_us(15); // Нужно минимум 10мкс, возьмём с запасом
			radio_deassert_ce();
			} else {
			uint8_t conf = radio_readreg(CONFIG);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	62 df       	rcall	.-316    	; 0x116 <radio_readreg>
			radio_writereg(CONFIG, conf | (1 << PRIM_RX)); // Устанавливаем бит PRIM_RX: приём
 252:	68 2f       	mov	r22, r24
 254:	61 60       	ori	r22, 0x01	; 1
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	65 df       	rcall	.-310    	; 0x124 <radio_writereg>
	writebyteAdxl(DATA_FORMAT, 0b00000011);
}*/
/////////////////////////////end of that stuff
// Выбирает активное состояние (высокий уровень) на линии CE
inline void radio_assert_ce() {
	RADIO_PORT |= (1 << RADIO_CE); // Установка высокого уровня на линии CE
 25a:	92 9a       	sbi	0x12, 2	; 18
 25c:	f4 cf       	rjmp	.-24     	; 0x246 <check_radio+0x4a>
			radio_writereg(CONFIG, conf | (1 << PRIM_RX)); // Устанавливаем бит PRIM_RX: приём
			radio_assert_ce(); // Высокий уровень на линии CE переводит радио-чип в режим приёма
		}
	}
	uint8_t protect = 4; // В очереди FIFO не должно быть более 3 пакетов. Если больше, значит что-то не так
	while (((status & (7 << RX_P_NO)) != (7 << RX_P_NO)) && protect--) { // Пока в очереди есть принятый пакет
 25e:	14 e0       	ldi	r17, 0x04	; 4
		uint8_t l = radio_read_rx_payload_width(); // Узнаём длину пакета
 260:	70 df       	rcall	.-288    	; 0x142 <radio_read_rx_payload_width>
		if (l > 32) { // Ошибка. Такой пакет нужно сбросить
 262:	81 32       	cpi	r24, 0x21	; 33
 264:	18 f0       	brcs	.+6      	; 0x26c <check_radio+0x70>
			radio_cmd(FLUSH_RX);
 266:	82 ee       	ldi	r24, 0xE2	; 226
 268:	52 df       	rcall	.-348    	; 0x10e <radio_cmd>
 26a:	06 c0       	rjmp	.+12     	; 0x278 <check_radio+0x7c>
			} else {
			uint8_t buf[32]; // буфер для принятого пакета
			radio_read_buf(R_RX_PAYLOAD, &buf[0], l); // начитывается пакет
 26c:	48 2f       	mov	r20, r24
 26e:	be 01       	movw	r22, r28
 270:	6f 5f       	subi	r22, 0xFF	; 255
 272:	7f 4f       	sbci	r23, 0xFF	; 255
 274:	81 e6       	ldi	r24, 0x61	; 97
 276:	6c df       	rcall	.-296    	; 0x150 <radio_read_buf>
			if ((status & (7 << RX_P_NO)) == (1 << RX_P_NO)) { // если datapipe 1
				on_packet(&buf[0], l); // вызываем обработчик полученного пакета
			}
		}
		status = radio_cmd(NOP);
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	49 df       	rcall	.-366    	; 0x10e <radio_cmd>
			radio_writereg(CONFIG, conf | (1 << PRIM_RX)); // Устанавливаем бит PRIM_RX: приём
			radio_assert_ce(); // Высокий уровень на линии CE переводит радио-чип в режим приёма
		}
	}
	uint8_t protect = 4; // В очереди FIFO не должно быть более 3 пакетов. Если больше, значит что-то не так
	while (((status & (7 << RX_P_NO)) != (7 << RX_P_NO)) && protect--) { // Пока в очереди есть принятый пакет
 27c:	8e 70       	andi	r24, 0x0E	; 14
 27e:	8e 30       	cpi	r24, 0x0E	; 14
 280:	11 f0       	breq	.+4      	; 0x286 <check_radio+0x8a>
 282:	11 50       	subi	r17, 0x01	; 1
 284:	69 f7       	brne	.-38     	; 0x260 <check_radio+0x64>
				on_packet(&buf[0], l); // вызываем обработчик полученного пакета
			}
		}
		status = radio_cmd(NOP);
	}
}
 286:	a0 96       	adiw	r28, 0x20	; 32
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	1f 91       	pop	r17
 298:	08 95       	ret

0000029a <main>:
int main(void)
{
	EIMSK|=(1<<6);//разрешаем прерывание по  INT0
 29a:	89 b7       	in	r24, 0x39	; 57
 29c:	80 64       	ori	r24, 0x40	; 64
 29e:	89 bf       	out	0x39, r24	; 57
	EICRA|=(1<<ISC01)|(0<<ISC00); //прерывание по ниспадающему фронту сигнала на INT0
 2a0:	ea e6       	ldi	r30, 0x6A	; 106
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	80 83       	st	Z, r24
    while(1)
    {
        //TODO:: Please write your application code 
		radio_init();
 2aa:	24 df       	rcall	.-440    	; 0xf4 <radio_init>
		check_radio();
 2ac:	a7 df       	rcall	.-178    	; 0x1fc <check_radio>
 2ae:	fd cf       	rjmp	.-6      	; 0x2aa <main+0x10>

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
